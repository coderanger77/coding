class Solution {
public:
    int palindrome(string s,int left,int right)
    {
        while(left<right && s[left]==s[right])
        {
            left++;
            right--;
        }
       // cout<<left<<" "<<right<<endl;
        if(left-1==right || left==right)
        {
           return 1;
        }else {
            return 0;
        }
    }
    
    string expandCenter(string s,int left,int right)
    {
        int flag=0;
        string result;
        while(left>=0 && right <=s.length()-1 && s[left]==s[right])
        {
            flag=1;
            left--;
            right++;
        }
        if(flag)
        {
        left++;
        right--;    
        string temp(s,left,right-left+1);
        result=temp;
        }
       // cout<<left<<" "<<right<<endl;
        
        return result;
    }
    
    
    string longestPalindrome(string s) {
        
        if(s.length()<=1)
        return s;
        
        int maxLength=-1;
        string result="";
        for(int i=0;i<s.length()-1;i++)
        {
            //odd
            string temp=expandCenter(s,i-1,i+1);
            if(temp.length()>result.length())
            {
                result=temp;
            }
            
            temp=expandCenter(s,i,i+1);
            if(temp.length()>result.length())
            {
                result=temp;
            }
            
        }
        
        
        
        
        return result;
        
    }
};
